
pragma solidity ^0.4.16;

interface token {
    function transfer(address receiver, uint amount)public;
    
}

contract Crowdsale {
    address public beneficiary;
    
    uint public fundingGoal;
    uint public amountRaised;
    uint public deadline;
    uint public price;
    
    token public tokenReward;
    
    
    mapping(address => uint256) public balanceOf;
    
    uint256 public tokenBalance   ;
    
    bool fundingGoalReached = false;
    bool crowdsaleClosed = false;
    address myAddress = this;

    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);

    /**
     * Constrctor function
     *
     * Setup the owner
     */
    function Crowdsale(
        //address ifSuccessfulSendTo
        //uint fundingGoalInEthers,
        //uint durationInMinutes
        //uint etherCostOfEachToken
        //address addressOfTokenUsedAsReward
         
    ) public{
        beneficiary = 0xB758131F09b8305a90e53F64Abb6717aF18f07C0;
        fundingGoal = 5 /*fundingGoalInEthers*/ * 1 ether;
        deadline = now +5 minutes;// durationInMinutes * 1 minutes;
        price = 1 * 0.1 ether; //etherCostOfEachToken * 0.1 ether;
        tokenReward = token(0x5c544D4899876806b2958ab56e1952e1848df534);
        
        //balance= myAddress.balance;
       
       
    }
     
    /**
     * Fallback function
     *
     * The function without name is the default function that is called whenever anyone sends funds to a contract
     */
     
     function check() view public returns(uint256){
         uint256 x=100;
         
         if((balanceOf[tokenReward])>0){
             
           return  balanceOf[tokenReward];
             
         }
         
         return x;
     }
     
     
     
     
     
     
    function () payable public{
        
    
        require(!crowdsaleClosed);
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount / price);
        FundTransfer(msg.sender, amount, true);
        
    }
    
    
    

    modifier afterDeadline() { if (now >= deadline) _; }

    /**
     * Check if goal was reached
     *
     * Checks if the goal or time limit has been reached and ends the campaign
     */
    function checkGoalReached() afterDeadline internal{
        if (amountRaised >= fundingGoal){
            fundingGoalReached = true;
            GoalReached(beneficiary, amountRaised);
        }
        crowdsaleClosed = true;
    }
  

    /**
     * Withdraw the funds
     *
     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,
     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw
     * the amount they contributed.
     */
    function safeWithdrawal() afterDeadline public{
        

        if (true) {
            if (beneficiary.send(1 ether)) {
                FundTransfer(beneficiary, amountRaised, false);
            } else {
                //If we fail to send the funds to beneficiary, unlock funders balance
                fundingGoalReached = false;
            }
        }
    }
}

