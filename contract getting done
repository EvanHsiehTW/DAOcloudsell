
pragma solidity ^0.4.16;




interface token{

    
    
    function transfer(address _to, uint _value) returns (bool success);
    function balanceOf(address _owner) constant returns (uint balance);
    

}



contract owned {
    address public owner;

    function owned() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) onlyOwner public {
        owner = newOwner;
    }
}





contract Crowdsale is owned {
    
    
   

    address tokenContract;

    uint256 public tokenBalance;
    
    address public defaultTokenAddress;
    
    
    address public beneficiary;
    
    uint public fundingGoal;
    uint public amountRaised;
    uint public deadline;
    uint public price;
    
    token tc ;
    token public tokenReward;
    
    
    mapping(address => uint256) public balanceOf;
    
  
    
    
    bool fundingGoalReached = false;
    bool crowdsaleClosed = false;
    

    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);

    /**
     * Constrctor function
     *
     * Setup the owner
     */
    function Crowdsale (
    //uint fundingGoalInEthers,
        //uint durationInMinutes
        //uint etherCostOfEachToken
        //address addressOfTokenUsedAsReward
        
        address ifSuccessfulSendTo,
        
         address _tokenContract
         
    )payable public  {
        if(ifSuccessfulSendTo != 0x0) {beneficiary = ifSuccessfulSendTo;}
        
        beneficiary = 0xB758131F09b8305a90e53F64Abb6717aF18f07C0;
        
        fundingGoal = 5 /*fundingGoalInEthers*/ * 1 ether;
        deadline = now +5 minutes;// durationInMinutes * 1 minutes;
        price = 1 * 0.1 ether; //etherCostOfEachToken * 0.1 ether;
       
        
        
        defaultTokenAddress = 0x5c544D4899876806b2958ab56e1952e1848df534;
        
       if(_tokenContract!=0x0) {
           tokenContract=_tokenContract;
           tokenReward = token(_tokenContract);
       }
        tokenContract = defaultTokenAddress;
         tokenReward = token(defaultTokenAddress);
         
        tc = token(tokenContract);
    
        tokenBalance = tc.balanceOf(this);
      
    }
     
     
    /**
     * Fallback function
     *
     * The function without name is the default function that is called whenever anyone sends funds to a contract
     */
    function ()payable{
     
      require(!crowdsaleClosed);
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount / price);
        FundTransfer(beneficiary, amount, false);
    
    }

    
    function changeBeneficiary(address _beneficiary)public onlyOwner{
        beneficiary =_beneficiary;
        
        
    }
    
     
    function changeToken(address _token)public onlyOwner{
        
         tokenReward = token(_token);
         defaultTokenAddress=_token;
    }
    
    

    
    function checkBalance()public view returns(uint256 _thisBalance){
        
       return this.balance;
        
    }
    
function checkTokenBalance()public view returns(uint256 _tokenBalance){
        
        
       tokenBalance = tc.balanceOf(this);
       return  tokenBalance = tc.balanceOf(this);
        
    }






    modifier afterDeadline() { if (now >= deadline) _; }

    /**
     * Check if goal was reached
     *
     * Checks if the goal or time limit has been reached and ends the campaign
     */
    function checkGoalReached() afterDeadline internal{
        if (amountRaised >= fundingGoal){
            fundingGoalReached = true;
            GoalReached(beneficiary, amountRaised);
        }
        crowdsaleClosed = true;
    }


   
    function safeWithdrawal() external onlyOwner{
        
        
        beneficiary.transfer(this.balance);

    }
    
    function withdrawTokens() onlyOwner public payable{
    
    
    tc.transfer(owner, tc.balanceOf(this));
    
    tokenBalance = tc.balanceOf(this);
    
}
 
    
    
}

